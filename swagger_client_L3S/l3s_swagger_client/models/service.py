# coding: utf-8

"""
    L3S Gateway for SEARCH

    Welcome to the Swagger UI documentation site!  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Service(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'org_id': 'str',
        'service_type': 'str',
        'content': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'org_id': 'org_id',
        'service_type': 'service_type',
        'content': 'content'
    }

    def __init__(self, user_id=None, org_id=None, service_type=None, content=None):  # noqa: E501
        """Service - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._org_id = None
        self._service_type = None
        self._content = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if org_id is not None:
            self.org_id = org_id
        self.service_type = service_type
        self.content = content

    @property
    def user_id(self):
        """Gets the user_id of this Service.  # noqa: E501

        The user ID in MLS  # noqa: E501

        :return: The user_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Service.

        The user ID in MLS  # noqa: E501

        :param user_id: The user_id of this Service.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def org_id(self):
        """Gets the org_id of this Service.  # noqa: E501

        The organization's ID in MLS  # noqa: E501

        :return: The org_id of this Service.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Service.

        The organization's ID in MLS  # noqa: E501

        :param org_id: The org_id of this Service.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def service_type(self):
        """Gets the service_type of this Service.  # noqa: E501

        The requesting service type.  # noqa: E501

        :return: The service_type of this Service.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this Service.

        The requesting service type.  # noqa: E501

        :param service_type: The service_type of this Service.  # noqa: E501
        :type: str
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")  # noqa: E501

        self._service_type = service_type

    @property
    def content(self):
        """Gets the content of this Service.  # noqa: E501

        The content to be processed.  # noqa: E501

        :return: The content of this Service.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Service.

        The content to be processed.  # noqa: E501

        :param content: The content of this Service.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Service, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Service):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
