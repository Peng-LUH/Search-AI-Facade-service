# coding: utf-8

"""
    L3S Gateway for SEARCH

    Welcome to the Swagger UI documentation site!  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client_1.configuration import Configuration


class Testing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_1': 'str',
        'input_2': 'str',
        'input_3': 'list[str]',
        'input_4': 'str'
    }

    attribute_map = {
        'input_1': 'input_1',
        'input_2': 'input_2',
        'input_3': 'input_3',
        'input_4': 'input_4'
    }

    def __init__(self, input_1=None, input_2=None, input_3=None, input_4=None, _configuration=None):  # noqa: E501
        """Testing - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._input_1 = None
        self._input_2 = None
        self._input_3 = None
        self._input_4 = None
        self.discriminator = None

        if input_1 is not None:
            self.input_1 = input_1
        if input_2 is not None:
            self.input_2 = input_2
        if input_3 is not None:
            self.input_3 = input_3
        if input_4 is not None:
            self.input_4 = input_4

    @property
    def input_1(self):
        """Gets the input_1 of this Testing.  # noqa: E501


        :return: The input_1 of this Testing.  # noqa: E501
        :rtype: str
        """
        return self._input_1

    @input_1.setter
    def input_1(self, input_1):
        """Sets the input_1 of this Testing.


        :param input_1: The input_1 of this Testing.  # noqa: E501
        :type: str
        """

        self._input_1 = input_1

    @property
    def input_2(self):
        """Gets the input_2 of this Testing.  # noqa: E501


        :return: The input_2 of this Testing.  # noqa: E501
        :rtype: str
        """
        return self._input_2

    @input_2.setter
    def input_2(self, input_2):
        """Sets the input_2 of this Testing.


        :param input_2: The input_2 of this Testing.  # noqa: E501
        :type: str
        """

        self._input_2 = input_2

    @property
    def input_3(self):
        """Gets the input_3 of this Testing.  # noqa: E501


        :return: The input_3 of this Testing.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_3

    @input_3.setter
    def input_3(self, input_3):
        """Sets the input_3 of this Testing.


        :param input_3: The input_3 of this Testing.  # noqa: E501
        :type: list[str]
        """

        self._input_3 = input_3

    @property
    def input_4(self):
        """Gets the input_4 of this Testing.  # noqa: E501


        :return: The input_4 of this Testing.  # noqa: E501
        :rtype: str
        """
        return self._input_4

    @input_4.setter
    def input_4(self, input_4):
        """Sets the input_4 of this Testing.


        :param input_4: The input_4 of this Testing.  # noqa: E501
        :type: str
        """

        self._input_4 = input_4

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Testing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Testing):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Testing):
            return True

        return self.to_dict() != other.to_dict()
