# coding: utf-8

"""
    SEARCH Gateway Service

    SEARCH Gateway Service using Flask, OpenAPI and Connexion  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from l3s_client.api_client import ApiClient


class SSEServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sse_gateway_create_qualification(self, body, **kwargs):  # noqa: E501
        """sse_gateway_create_qualification  # noqa: E501

        Creates a new qualification for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_qualification(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_create_qualification_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_create_qualification_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sse_gateway_create_qualification_with_http_info(self, body, **kwargs):  # noqa: E501
        """sse_gateway_create_qualification  # noqa: E501

        Creates a new qualification for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_qualification_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualificationCreationDto body: (required)
        :return: QualificationDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_create_qualification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sse_gateway_create_qualification`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/user/qualification/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualificationDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_create_repository(self, body, **kwargs):  # noqa: E501
        """sse_gateway_create_repository  # noqa: E501

        Creates a new skill repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryCreationDto body: (required)
        :return: SkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_create_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_create_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def sse_gateway_create_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """sse_gateway_create_repository  # noqa: E501

        Creates a new skill repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryCreationDto body: (required)
        :return: SkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_create_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sse_gateway_create_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_create_skill(self, body, repository_id, **kwargs):  # noqa: E501
        """sse_gateway_create_skill  # noqa: E501

        Creates a new skill  for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_skill(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_create_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_create_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def sse_gateway_create_skill_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """sse_gateway_create_skill  # noqa: E501

        Creates a new skill  for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_create_skill_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_create_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `sse_gateway_create_skill`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `sse_gateway_create_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill/create/{repositoryId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_del_skill(self, id, **kwargs):  # noqa: E501
        """Delete an skill with given ID  # noqa: E501

        Delete an skill with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_del_skill(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: skill ID (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_del_skill_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_del_skill_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sse_gateway_del_skill_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an skill with given ID  # noqa: E501

        Delete an skill with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_del_skill_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: skill ID (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_del_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sse_gateway_del_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill/del/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_get_all_lu(self, **kwargs):  # noqa: E501
        """Lists all learningUnits.  # noqa: E501

        Lists all learningUnits.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_all_lu(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SearchLearningUnitListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_get_all_lu_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_get_all_lu_with_http_info(**kwargs)  # noqa: E501
            return data

    def sse_gateway_get_all_lu_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all learningUnits.  # noqa: E501

        Lists all learningUnits.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_all_lu_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SearchLearningUnitListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_get_all_lu" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/learningUnits/showAllLearningUnits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchLearningUnitListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_get_repository(self, id, **kwargs):  # noqa: E501
        """Return an Repo with given ID  # noqa: E501

        Return an Repo with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_repository(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Repo ID (required)
        :return: UnresolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_get_repository_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_get_repository_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sse_gateway_get_repository_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return an Repo with given ID  # noqa: E501

        Return an Repo with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_repository_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Repo ID (required)
        :return: UnresolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_get_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sse_gateway_get_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/byid/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnresolvedSkillRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_get_repository_by_owner(self, owner_id, **kwargs):  # noqa: E501
        """Return all Repos by owner ID  # noqa: E501

        Return all Repos by owner ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_repository_by_owner(owner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_id: Repo ID (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_get_repository_by_owner_with_http_info(owner_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_get_repository_by_owner_with_http_info(owner_id, **kwargs)  # noqa: E501
            return data

    def sse_gateway_get_repository_by_owner_with_http_info(self, owner_id, **kwargs):  # noqa: E501
        """Return all Repos by owner ID  # noqa: E501

        Return all Repos by owner ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_repository_by_owner_with_http_info(owner_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner_id: Repo ID (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_get_repository_by_owner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_id' is set
        if ('owner_id' not in params or
                params['owner_id'] is None):
            raise ValueError("Missing the required parameter `owner_id` when calling `sse_gateway_get_repository_by_owner`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner_id' in params:
            path_params['ownerId'] = params['owner_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/byowner{ownerId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillRepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sse_gateway_get_skill(self, id, **kwargs):  # noqa: E501
        """Return an skill with given ID  # noqa: E501

        Return an skill with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_skill(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: skill ID (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sse_gateway_get_skill_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.sse_gateway_get_skill_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def sse_gateway_get_skill_with_http_info(self, id, **kwargs):  # noqa: E501
        """Return an skill with given ID  # noqa: E501

        Return an skill with given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sse_gateway_get_skill_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: skill ID (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sse_gateway_get_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `sse_gateway_get_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
