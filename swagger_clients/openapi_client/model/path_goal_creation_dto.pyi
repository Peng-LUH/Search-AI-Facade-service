# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    The version of the OpenAPI document: 0.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PathGoalCreationDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "pathGoals",
            "requirements",
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            
            
            class requirements(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SkillDto']:
                        return SkillDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SkillDto'], typing.List['SkillDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'requirements':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SkillDto':
                    return super().__getitem__(i)
            
            
            class pathGoals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SkillDto']:
                        return SkillDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SkillDto'], typing.List['SkillDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pathGoals':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SkillDto':
                    return super().__getitem__(i)
            targetAudience = schemas.StrSchema
            description = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "requirements": requirements,
                "pathGoals": pathGoals,
                "targetAudience": targetAudience,
                "description": description,
            }
    
    pathGoals: MetaOapg.properties.pathGoals
    requirements: MetaOapg.properties.requirements
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requirements"]) -> MetaOapg.properties.requirements: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pathGoals"]) -> MetaOapg.properties.pathGoals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetAudience"]) -> MetaOapg.properties.targetAudience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "requirements", "pathGoals", "targetAudience", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requirements"]) -> MetaOapg.properties.requirements: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pathGoals"]) -> MetaOapg.properties.pathGoals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetAudience"]) -> typing.Union[MetaOapg.properties.targetAudience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "requirements", "pathGoals", "targetAudience", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pathGoals: typing.Union[MetaOapg.properties.pathGoals, list, tuple, ],
        requirements: typing.Union[MetaOapg.properties.requirements, list, tuple, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        targetAudience: typing.Union[MetaOapg.properties.targetAudience, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PathGoalCreationDto':
        return super().__new__(
            cls,
            *_args,
            pathGoals=pathGoals,
            requirements=requirements,
            title=title,
            targetAudience=targetAudience,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.skill_dto import SkillDto
