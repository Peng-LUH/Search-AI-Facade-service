# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    The version of the OpenAPI document: 0.4.2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SearchLearningUnitDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "searchId",
            "language",
            "title",
        }
        
        class properties:
            searchId = schemas.NumberSchema
            title = schemas.StrSchema
            language = schemas.StrSchema
            processingTime = schemas.StrSchema
            rating = schemas.StrSchema
            contentCreator = schemas.StrSchema
            contentProvider = schemas.StrSchema
            targetAudience = schemas.StrSchema
            semanticDensity = schemas.StrSchema
            semanticGravity = schemas.StrSchema
            
            
            class contentTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contentTags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class contextTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contextTags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            linkToHelpMaterial = schemas.StrSchema
            description = schemas.StrSchema
            __annotations__ = {
                "searchId": searchId,
                "title": title,
                "language": language,
                "processingTime": processingTime,
                "rating": rating,
                "contentCreator": contentCreator,
                "contentProvider": contentProvider,
                "targetAudience": targetAudience,
                "semanticDensity": semanticDensity,
                "semanticGravity": semanticGravity,
                "contentTags": contentTags,
                "contextTags": contextTags,
                "linkToHelpMaterial": linkToHelpMaterial,
                "description": description,
            }
    
    searchId: MetaOapg.properties.searchId
    language: MetaOapg.properties.language
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchId"]) -> MetaOapg.properties.searchId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processingTime"]) -> MetaOapg.properties.processingTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentCreator"]) -> MetaOapg.properties.contentCreator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentProvider"]) -> MetaOapg.properties.contentProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetAudience"]) -> MetaOapg.properties.targetAudience: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["semanticDensity"]) -> MetaOapg.properties.semanticDensity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["semanticGravity"]) -> MetaOapg.properties.semanticGravity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentTags"]) -> MetaOapg.properties.contentTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contextTags"]) -> MetaOapg.properties.contextTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkToHelpMaterial"]) -> MetaOapg.properties.linkToHelpMaterial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["searchId", "title", "language", "processingTime", "rating", "contentCreator", "contentProvider", "targetAudience", "semanticDensity", "semanticGravity", "contentTags", "contextTags", "linkToHelpMaterial", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchId"]) -> MetaOapg.properties.searchId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processingTime"]) -> typing.Union[MetaOapg.properties.processingTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> typing.Union[MetaOapg.properties.rating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentCreator"]) -> typing.Union[MetaOapg.properties.contentCreator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentProvider"]) -> typing.Union[MetaOapg.properties.contentProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetAudience"]) -> typing.Union[MetaOapg.properties.targetAudience, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["semanticDensity"]) -> typing.Union[MetaOapg.properties.semanticDensity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["semanticGravity"]) -> typing.Union[MetaOapg.properties.semanticGravity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentTags"]) -> typing.Union[MetaOapg.properties.contentTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contextTags"]) -> typing.Union[MetaOapg.properties.contextTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkToHelpMaterial"]) -> typing.Union[MetaOapg.properties.linkToHelpMaterial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["searchId", "title", "language", "processingTime", "rating", "contentCreator", "contentProvider", "targetAudience", "semanticDensity", "semanticGravity", "contentTags", "contextTags", "linkToHelpMaterial", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        searchId: typing.Union[MetaOapg.properties.searchId, decimal.Decimal, int, float, ],
        language: typing.Union[MetaOapg.properties.language, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        processingTime: typing.Union[MetaOapg.properties.processingTime, str, schemas.Unset] = schemas.unset,
        rating: typing.Union[MetaOapg.properties.rating, str, schemas.Unset] = schemas.unset,
        contentCreator: typing.Union[MetaOapg.properties.contentCreator, str, schemas.Unset] = schemas.unset,
        contentProvider: typing.Union[MetaOapg.properties.contentProvider, str, schemas.Unset] = schemas.unset,
        targetAudience: typing.Union[MetaOapg.properties.targetAudience, str, schemas.Unset] = schemas.unset,
        semanticDensity: typing.Union[MetaOapg.properties.semanticDensity, str, schemas.Unset] = schemas.unset,
        semanticGravity: typing.Union[MetaOapg.properties.semanticGravity, str, schemas.Unset] = schemas.unset,
        contentTags: typing.Union[MetaOapg.properties.contentTags, list, tuple, schemas.Unset] = schemas.unset,
        contextTags: typing.Union[MetaOapg.properties.contextTags, list, tuple, schemas.Unset] = schemas.unset,
        linkToHelpMaterial: typing.Union[MetaOapg.properties.linkToHelpMaterial, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SearchLearningUnitDto':
        return super().__new__(
            cls,
            *_args,
            searchId=searchId,
            language=language,
            title=title,
            processingTime=processingTime,
            rating=rating,
            contentCreator=contentCreator,
            contentProvider=contentProvider,
            targetAudience=targetAudience,
            semanticDensity=semanticDensity,
            semanticGravity=semanticGravity,
            contentTags=contentTags,
            contextTags=contextTags,
            linkToHelpMaterial=linkToHelpMaterial,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )
